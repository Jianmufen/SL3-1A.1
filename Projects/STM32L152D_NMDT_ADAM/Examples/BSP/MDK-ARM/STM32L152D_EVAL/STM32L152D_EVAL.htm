<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L152D_EVAL\STM32L152D_EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L152D_EVAL\STM32L152D_EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Jun 20 15:01:15 2017
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EEPROM_demo &rArr; EEPROM_Show_Feature &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[72]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[5a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">BusFault_Handler</a><BR>
 <LI><a href="#[58]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">HardFault_Handler</a><BR>
 <LI><a href="#[59]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">MemManage_Handler</a><BR>
 <LI><a href="#[5b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[72]">ADC1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[9b]">ADC_DMAConvCplt</a> from stm32l1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[9d]">ADC_DMAError</a> from stm32l1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[9c]">ADC_DMAHalfConvCplt</a> from stm32l1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[5]">AudioPlay_demo</a> from audio_play.o(i.AudioPlay_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[6]">AudioRecord_demo</a> from audio_record.o(i.AudioRecord_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[5a]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[97]">COMP_ACQ_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[76]">COMP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[75]">DAC_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[6b]">DMA1_Channel1_IRQHandler</a> from stm32l1xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[6c]">DMA1_Channel2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[6d]">DMA1_Channel3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[6e]">DMA1_Channel4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[6f]">DMA1_Channel5_IRQHandler</a> from stm32l1xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[70]">DMA1_Channel6_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[71]">DMA1_Channel7_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[92]">DMA2_Channel1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[93]">DMA2_Channel2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[94]">DMA2_Channel3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[95]">DMA2_Channel4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[96]">DMA2_Channel5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[5d]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[50]">EEPROM_I2C_Init</a> from stm32l152d_eval_eeprom.o(i.EEPROM_I2C_Init) referenced 2 times from stm32l152d_eval_eeprom.o(.data)
 <LI><a href="#[51]">EEPROM_I2C_ReadBuffer</a> from stm32l152d_eval_eeprom.o(i.EEPROM_I2C_ReadBuffer) referenced 2 times from stm32l152d_eval_eeprom.o(.data)
 <LI><a href="#[52]">EEPROM_I2C_WritePage</a> from stm32l152d_eval_eeprom.o(i.EEPROM_I2C_WritePage) referenced 2 times from stm32l152d_eval_eeprom.o(.data)
 <LI><a href="#[53]">EEPROM_SPI_Init</a> from stm32l152d_eval_eeprom.o(i.EEPROM_SPI_Init) referenced 2 times from stm32l152d_eval_eeprom.o(.data)
 <LI><a href="#[54]">EEPROM_SPI_ReadBuffer</a> from stm32l152d_eval_eeprom.o(i.EEPROM_SPI_ReadBuffer) referenced 2 times from stm32l152d_eval_eeprom.o(.data)
 <LI><a href="#[55]">EEPROM_SPI_WritePage</a> from stm32l152d_eval_eeprom.o(i.EEPROM_SPI_WritePage) referenced 2 times from stm32l152d_eval_eeprom.o(.data)
 <LI><a href="#[3]">EEPROM_demo</a> from eeprom.o(i.EEPROM_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[66]">EXTI0_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[88]">EXTI15_10_IRQHandler</a> from stm32l1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[67]">EXTI1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[68]">EXTI2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[69]">EXTI3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[6a]">EXTI4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[77]">EXTI9_5_IRQHandler</a> from stm32l1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[64]">FLASH_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[58]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[80]">I2C1_ER_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7f]">I2C1_EV_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[82]">I2C2_ER_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[81]">I2C2_EV_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[a0]">I2S_DMAError</a> from stm32l1xx_hal_i2s.o(i.I2S_DMAError) referenced from stm32l1xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
 <LI><a href="#[9f]">I2S_DMATxCplt</a> from stm32l1xx_hal_i2s.o(i.I2S_DMATxCplt) referenced from stm32l1xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
 <LI><a href="#[9e]">I2S_DMATxHalfCplt</a> from stm32l1xx_hal_i2s.o(i.I2S_DMATxHalfCplt) referenced from stm32l1xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
 <LI><a href="#[0]">Joystick_demo</a> from joystick.o(i.Joystick_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[78]">LCD_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[1]">LCD_demo</a> from lcd.o(i.LCD_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[9]">Log_demo</a> from log.o(i.Log_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[59]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[57]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7]">NOR_demo</a> from nor.o(i.NOR_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[61]">PVD_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[5e]">PendSV_Handler</a> from stm32l1xx_it.o(i.PendSV_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[65]">RCC_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[89]">RTC_Alarm_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[63]">RTC_WKUP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[56]">Reset_Handler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8d]">SDIO_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2]">SD_demo</a> from sd.o(i.SD_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[83]">SPI1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[84]">SPI2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8f]">SPI3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8]">SRAM_demo</a> from sram.o(i.SRAM_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[25]">STLM75_Init</a> from stlm75.o(i.STLM75_Init) referenced 2 times from stlm75.o(.data)
 <LI><a href="#[26]">STLM75_IsReady</a> from stlm75.o(i.STLM75_IsReady) referenced 2 times from stlm75.o(.data)
 <LI><a href="#[27]">STLM75_ReadStatus</a> from stlm75.o(i.STLM75_ReadStatus) referenced 2 times from stlm75.o(.data)
 <LI><a href="#[28]">STLM75_ReadTemp</a> from stlm75.o(i.STLM75_ReadTemp) referenced 2 times from stlm75.o(.data)
 <LI><a href="#[5c]">SVC_Handler</a> from stm32l1xx_it.o(i.SVC_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[5f]">SysTick_Handler</a> from stm32l1xx_it.o(i.SysTick_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[99]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l152xd.o(.text)
 <LI><a href="#[62]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7a]">TIM10_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7b]">TIM11_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7c]">TIM2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7d]">TIM3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7e]">TIM4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8e]">TIM5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8b]">TIM6_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8c]">TIM7_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[79]">TIM9_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[4]">TSENSOR_demo</a> from temperature_sensor.o(i.TSENSOR_demo) referenced 2 times from main.o(.data)
 <LI><a href="#[90]">UART4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[91]">UART5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[85]">USART1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[86]">USART2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[87]">USART3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8a]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[73]">USB_HP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[74]">USB_LP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[5b]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[60]">WWDG_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[9a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l152xd.o(.text)
 <LI><a href="#[a2]">_snputc</a> from printf4.o(i._snputc) referenced from printf4.o(i.__0snprintf$4)
 <LI><a href="#[a3]">_sputc</a> from printf4.o(i._sputc) referenced from printf4.o(i.__0sprintf$4)
 <LI><a href="#[37]">cs43l22_DeInit</a> from cs43l22.o(i.cs43l22_DeInit) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[36]">cs43l22_Init</a> from cs43l22.o(i.cs43l22_Init) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[3a]">cs43l22_Pause</a> from cs43l22.o(i.cs43l22_Pause) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[39]">cs43l22_Play</a> from cs43l22.o(i.cs43l22_Play) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[38]">cs43l22_ReadID</a> from cs43l22.o(i.cs43l22_ReadID) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[41]">cs43l22_Reset</a> from cs43l22.o(i.cs43l22_Reset) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[3b]">cs43l22_Resume</a> from cs43l22.o(i.cs43l22_Resume) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[3d]">cs43l22_SetFrequency</a> from cs43l22.o(i.cs43l22_SetFrequency) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[3f]">cs43l22_SetMute</a> from cs43l22.o(i.cs43l22_SetMute) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[40]">cs43l22_SetOutputMode</a> from cs43l22.o(i.cs43l22_SetOutputMode) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[3e]">cs43l22_SetVolume</a> from cs43l22.o(i.cs43l22_SetVolume) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[3c]">cs43l22_Stop</a> from cs43l22.o(i.cs43l22_Stop) referenced 2 times from cs43l22.o(.data)
 <LI><a href="#[a1]">fputc</a> from lcd_log.o(i.fputc) referenced from printf4.o(i.__0printf$4)
 <LI><a href="#[2c]">hx8347d_DisplayOff</a> from hx8347d.o(i.hx8347d_DisplayOff) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[2b]">hx8347d_DisplayOn</a> from hx8347d.o(i.hx8347d_DisplayOn) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[35]">hx8347d_DrawBitmap</a> from hx8347d.o(i.hx8347d_DrawBitmap) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[31]">hx8347d_DrawHLine</a> from hx8347d.o(i.hx8347d_DrawHLine) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[32]">hx8347d_DrawVLine</a> from hx8347d.o(i.hx8347d_DrawVLine) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[34]">hx8347d_GetLcdPixelHeight</a> from hx8347d.o(i.hx8347d_GetLcdPixelHeight) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[33]">hx8347d_GetLcdPixelWidth</a> from hx8347d.o(i.hx8347d_GetLcdPixelWidth) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[29]">hx8347d_Init</a> from hx8347d.o(i.hx8347d_Init) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[2a]">hx8347d_ReadID</a> from hx8347d.o(i.hx8347d_ReadID) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[2f]">hx8347d_ReadPixel</a> from hx8347d.o(i.hx8347d_ReadPixel) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[2d]">hx8347d_SetCursor</a> from hx8347d.o(i.hx8347d_SetCursor) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[30]">hx8347d_SetDisplayWindow</a> from hx8347d.o(i.hx8347d_SetDisplayWindow) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[2e]">hx8347d_WritePixel</a> from hx8347d.o(i.hx8347d_WritePixel) referenced 2 times from hx8347d.o(.data)
 <LI><a href="#[d]">ili9320_DisplayOff</a> from ili9320.o(i.ili9320_DisplayOff) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[c]">ili9320_DisplayOn</a> from ili9320.o(i.ili9320_DisplayOn) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[16]">ili9320_DrawBitmap</a> from ili9320.o(i.ili9320_DrawBitmap) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[12]">ili9320_DrawHLine</a> from ili9320.o(i.ili9320_DrawHLine) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[17]">ili9320_DrawRGBImage</a> from ili9320.o(i.ili9320_DrawRGBImage) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[13]">ili9320_DrawVLine</a> from ili9320.o(i.ili9320_DrawVLine) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[15]">ili9320_GetLcdPixelHeight</a> from ili9320.o(i.ili9320_GetLcdPixelHeight) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[14]">ili9320_GetLcdPixelWidth</a> from ili9320.o(i.ili9320_GetLcdPixelWidth) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[a]">ili9320_Init</a> from ili9320.o(i.ili9320_Init) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[b]">ili9320_ReadID</a> from ili9320.o(i.ili9320_ReadID) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[10]">ili9320_ReadPixel</a> from ili9320.o(i.ili9320_ReadPixel) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[e]">ili9320_SetCursor</a> from ili9320.o(i.ili9320_SetCursor) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[11]">ili9320_SetDisplayWindow</a> from ili9320.o(i.ili9320_SetDisplayWindow) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[f]">ili9320_WritePixel</a> from ili9320.o(i.ili9320_WritePixel) referenced 2 times from ili9320.o(.data)
 <LI><a href="#[45]">ili9325_DisplayOff</a> from ili9325.o(i.ili9325_DisplayOff) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[44]">ili9325_DisplayOn</a> from ili9325.o(i.ili9325_DisplayOn) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[4e]">ili9325_DrawBitmap</a> from ili9325.o(i.ili9325_DrawBitmap) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[4a]">ili9325_DrawHLine</a> from ili9325.o(i.ili9325_DrawHLine) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[4f]">ili9325_DrawRGBImage</a> from ili9325.o(i.ili9325_DrawRGBImage) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[4b]">ili9325_DrawVLine</a> from ili9325.o(i.ili9325_DrawVLine) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[4d]">ili9325_GetLcdPixelHeight</a> from ili9325.o(i.ili9325_GetLcdPixelHeight) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[4c]">ili9325_GetLcdPixelWidth</a> from ili9325.o(i.ili9325_GetLcdPixelWidth) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[42]">ili9325_Init</a> from ili9325.o(i.ili9325_Init) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[43]">ili9325_ReadID</a> from ili9325.o(i.ili9325_ReadID) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[48]">ili9325_ReadPixel</a> from ili9325.o(i.ili9325_ReadPixel) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[46]">ili9325_SetCursor</a> from ili9325.o(i.ili9325_SetCursor) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[49]">ili9325_SetDisplayWindow</a> from ili9325.o(i.ili9325_SetDisplayWindow) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[47]">ili9325_WritePixel</a> from ili9325.o(i.ili9325_WritePixel) referenced 2 times from ili9325.o(.data)
 <LI><a href="#[98]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1b]">spfd5408_DisplayOff</a> from spfd5408.o(i.spfd5408_DisplayOff) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[1a]">spfd5408_DisplayOn</a> from spfd5408.o(i.spfd5408_DisplayOn) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[24]">spfd5408_DrawBitmap</a> from spfd5408.o(i.spfd5408_DrawBitmap) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[20]">spfd5408_DrawHLine</a> from spfd5408.o(i.spfd5408_DrawHLine) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[21]">spfd5408_DrawVLine</a> from spfd5408.o(i.spfd5408_DrawVLine) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[23]">spfd5408_GetLcdPixelHeight</a> from spfd5408.o(i.spfd5408_GetLcdPixelHeight) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[22]">spfd5408_GetLcdPixelWidth</a> from spfd5408.o(i.spfd5408_GetLcdPixelWidth) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[18]">spfd5408_Init</a> from spfd5408.o(i.spfd5408_Init) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[19]">spfd5408_ReadID</a> from spfd5408.o(i.spfd5408_ReadID) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[1e]">spfd5408_ReadPixel</a> from spfd5408.o(i.spfd5408_ReadPixel) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[1c]">spfd5408_SetCursor</a> from spfd5408.o(i.spfd5408_SetCursor) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[1f]">spfd5408_SetDisplayWindow</a> from spfd5408.o(i.spfd5408_SetDisplayWindow) referenced 2 times from spfd5408.o(.data)
 <LI><a href="#[1d]">spfd5408_WritePixel</a> from spfd5408.o(i.spfd5408_WritePixel) referenced 2 times from spfd5408.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[a4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1d5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1d7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[56]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_DisplayInfos
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_Display_Temperature
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_BANK4_MspInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_BANK4_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_Init
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillEllipse
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawEllipse
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillEllipse
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawEllipse
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillEllipse
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawEllipse
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1de]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[ac]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1df]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1e0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1e1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[b6]"></a>ADC_Enable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[1c7]"></a>AUDIO_IO_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.AUDIO_IO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_DeInit
</UL>

<P><STRONG><a name="[c0]"></a>AUDIO_IO_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l152d_eval.o(i.AUDIO_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AUDIO_IO_Init &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_ReadID
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Init
</UL>

<P><STRONG><a name="[c4]"></a>AUDIO_IO_Read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32l152d_eval.o(i.AUDIO_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AUDIO_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_ReadID
</UL>

<P><STRONG><a name="[c7]"></a>AUDIO_IO_Write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32l152d_eval.o(i.AUDIO_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>

<P><STRONG><a name="[5]"></a>AudioPlay_demo</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, audio_play.o(i.AudioPlay_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AudioPlay_demo &rArr; AudioPlay_DisplayInfos &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetVolume
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Resume
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Pause
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_DisplayInfos
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>AudioRecord_demo</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, audio_record.o(i.AudioRecord_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AudioRecord_demo &rArr; BSP_AUDIO_IN_Init &rArr; ADCx_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Record
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[156]"></a>BSP_AUDIO_IN_HalfTransfer_CallBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_record.o(i.BSP_AUDIO_IN_HalfTransfer_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>

<P><STRONG><a name="[e1]"></a>BSP_AUDIO_IN_Init</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_IN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_AUDIO_IN_Init &rArr; ADCx_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_Start
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_GetState
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[e2]"></a>BSP_AUDIO_IN_Record</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_IN_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_AUDIO_IN_Record &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[e3]"></a>BSP_AUDIO_IN_Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_IN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_AUDIO_IN_Stop &rArr; HAL_ADC_Stop_DMA &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[155]"></a>BSP_AUDIO_IN_TransferComplete_CallBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_record.o(i.BSP_AUDIO_IN_TransferComplete_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[f2]"></a>BSP_AUDIO_OUT_ChangeBuffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_ChangeBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_AUDIO_OUT_ChangeBuffer &rArr; HAL_I2S_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
</UL>

<P><STRONG><a name="[f4]"></a>BSP_AUDIO_OUT_Error_CallBack</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, audio_play.o(i.BSP_AUDIO_OUT_Error_CallBack))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_ErrorCallback
</UL>

<P><STRONG><a name="[16e]"></a>BSP_AUDIO_OUT_HalfTransfer_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_HalfTransfer_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxHalfCpltCallback
</UL>

<P><STRONG><a name="[d6]"></a>BSP_AUDIO_OUT_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_AUDIO_OUT_Init &rArr; I2SOUT_Init &rArr; I2SOUT_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[da]"></a>BSP_AUDIO_OUT_Pause</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_Pause
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_DMAPause
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
</UL>

<P><STRONG><a name="[d8]"></a>BSP_AUDIO_OUT_Play</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_AUDIO_OUT_Play &rArr; HAL_I2S_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[dc]"></a>BSP_AUDIO_OUT_Resume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_DMAResume
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
</UL>

<P><STRONG><a name="[dd]"></a>BSP_AUDIO_OUT_SetVolume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
</UL>

<P><STRONG><a name="[df]"></a>BSP_AUDIO_OUT_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.BSP_AUDIO_OUT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_AUDIO_OUT_Stop &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_DMAStop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[f9]"></a>BSP_AUDIO_OUT_TransferComplete_CallBack</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, audio_play.o(i.BSP_AUDIO_OUT_TransferComplete_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_AUDIO_OUT_TransferComplete_CallBack &rArr; BSP_AUDIO_OUT_Play &rArr; HAL_I2S_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ChangeBuffer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxCpltCallback
</UL>

<P><STRONG><a name="[14d]"></a>BSP_EEPROM_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l152d_eval_eeprom.o(i.BSP_EEPROM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
</UL>

<P><STRONG><a name="[150]"></a>BSP_EEPROM_ReadBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l152d_eval_eeprom.o(i.BSP_EEPROM_ReadBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
</UL>

<P><STRONG><a name="[151]"></a>BSP_EEPROM_SelectDevice</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l152d_eval_eeprom.o(i.BSP_EEPROM_SelectDevice))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_demo
</UL>

<P><STRONG><a name="[141]"></a>BSP_EEPROM_TIMEOUT_UserCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eeprom.o(i.BSP_EEPROM_TIMEOUT_UserCallback))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_WaitEepromStandbyState
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_WritePage
</UL>

<P><STRONG><a name="[14f]"></a>BSP_EEPROM_WriteBuffer</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, stm32l152d_eval_eeprom.o(i.BSP_EEPROM_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_EEPROM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
</UL>

<P><STRONG><a name="[fb]"></a>BSP_JOY_GetState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l152d_eval.o(i.BSP_JOY_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_JOY_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
</UL>

<P><STRONG><a name="[fd]"></a>BSP_JOY_Init</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, stm32l152d_eval.o(i.BSP_JOY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_JOY_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
</UL>

<P><STRONG><a name="[cd]"></a>BSP_LCD_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_Clear &rArr; BSP_LCD_DrawHLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
</UL>

<P><STRONG><a name="[ff]"></a>BSP_LCD_ClearStringLine</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_ClearStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_ClearStringLine &rArr; BSP_LCD_FillRect &rArr; BSP_LCD_DrawHLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ClearTextZone
</UL>

<P><STRONG><a name="[100]"></a>BSP_LCD_DisplayChar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[1aa]"></a>BSP_LCD_DisplayOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DisplayOff))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[1ab]"></a>BSP_LCD_DisplayOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DisplayOn))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[cb]"></a>BSP_LCD_DisplayStringAt</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_DisplayInfos
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_demo
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_Display_Temperature
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
</UL>

<P><STRONG><a name="[102]"></a>BSP_LCD_DisplayStringAtLine</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DisplayStringAtLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>

<P><STRONG><a name="[103]"></a>BSP_LCD_DrawBitmap</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[105]"></a>BSP_LCD_DrawCircle</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DrawCircle &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
</UL>

<P><STRONG><a name="[107]"></a>BSP_LCD_DrawEllipse</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DrawEllipse &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
</UL>

<P><STRONG><a name="[fe]"></a>BSP_LCD_DrawHLine</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_LCD_DrawHLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
</UL>

<P><STRONG><a name="[109]"></a>BSP_LCD_DrawLine</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DrawLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPolygon
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillTriangle
</UL>

<P><STRONG><a name="[10a]"></a>BSP_LCD_DrawPolygon</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_DrawPolygon &rArr; BSP_LCD_DrawLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
</UL>

<P><STRONG><a name="[d4]"></a>BSP_LCD_DrawRect</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LCD_DrawRect &rArr; BSP_LCD_DrawVLine &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
</UL>

<P><STRONG><a name="[10b]"></a>BSP_LCD_DrawVLine</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LCD_DrawVLine &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillEllipse
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>

<P><STRONG><a name="[10c]"></a>BSP_LCD_FillCircle</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_LCD_FillCircle &rArr; BSP_LCD_DrawCircle &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
</UL>

<P><STRONG><a name="[10d]"></a>BSP_LCD_FillEllipse</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_FillEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LCD_FillEllipse &rArr; BSP_LCD_DrawVLine &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
</UL>

<P><STRONG><a name="[10e]"></a>BSP_LCD_FillPolygon</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BSP_LCD_FillPolygon &rArr; BSP_LCD_FillTriangle &rArr; BSP_LCD_DrawLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillTriangle
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
</UL>

<P><STRONG><a name="[d0]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_FillRect &rArr; BSP_LCD_DrawHLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
</UL>

<P><STRONG><a name="[10f]"></a>BSP_LCD_FillTriangle</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_FillTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LCD_FillTriangle &rArr; BSP_LCD_DrawLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillPolygon
</UL>

<P><STRONG><a name="[1c8]"></a>BSP_LCD_GetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cf]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
</UL>

<P><STRONG><a name="[d3]"></a>BSP_LCD_GetYSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
</UL>

<P><STRONG><a name="[1d1]"></a>BSP_LCD_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>BSP_LCD_SetBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
</UL>

<P><STRONG><a name="[d2]"></a>BSP_LCD_SetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_Display_Temperature
</UL>

<P><STRONG><a name="[ce]"></a>BSP_LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l152d_eval_lcd.o(i.BSP_LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_SetHint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_demo
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_SetHint
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_Display_Temperature
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>

<P><STRONG><a name="[110]"></a>BSP_LED_Init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, stm32l152d_eval.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[d9]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[fa]"></a>BSP_LED_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.BSP_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Leds
</UL>

<P><STRONG><a name="[112]"></a>BSP_NOR_Erase_Block</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l152d_eval_nor.o(i.BSP_NOR_Erase_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_NOR_Erase_Block &rArr; HAL_NOR_GetStatus &rArr; HAL_NOR_MspWait
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_GetStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Erase_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[115]"></a>BSP_NOR_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32l152d_eval_nor.o(i.BSP_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_NOR_Init &rArr; NOR_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[118]"></a>BSP_NOR_ReadData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l152d_eval_nor.o(i.BSP_NOR_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_NOR_ReadData &rArr; HAL_NOR_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[11a]"></a>BSP_NOR_Read_ID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l152d_eval_nor.o(i.BSP_NOR_Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_NOR_Read_ID &rArr; HAL_NOR_Read_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Read_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[11c]"></a>BSP_NOR_ReturnToReadMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l152d_eval_nor.o(i.BSP_NOR_ReturnToReadMode))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_ReturnToReadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[11e]"></a>BSP_NOR_WriteData</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32l152d_eval_nor.o(i.BSP_NOR_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_NOR_WriteData &rArr; HAL_NOR_GetStatus &rArr; HAL_NOR_MspWait
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Program
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[120]"></a>BSP_PB_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.BSP_PB_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
</UL>

<P><STRONG><a name="[d5]"></a>BSP_PB_Init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, stm32l152d_eval.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>BSP_SD_Erase</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l152d_eval_sd.o(i.BSP_SD_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_SD_Erase &rArr; HAL_SD_Erase &rArr; SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[123]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l152d_eval_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_SD_GetCardInfo &rArr; HAL_SD_Get_CardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Get_CardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[125]"></a>BSP_SD_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l152d_eval_sd.o(i.BSP_SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_SD_GetStatus &rArr; HAL_SD_GetStatus &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[127]"></a>BSP_SD_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l152d_eval_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[128]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l152d_eval_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[12c]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32l152d_eval_sd.o(i.BSP_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[12e]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32l152d_eval_sd.o(i.BSP_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[130]"></a>BSP_SRAM_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32l152d_eval_sram.o(i.BSP_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_SRAM_Init &rArr; SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
</UL>

<P><STRONG><a name="[133]"></a>BSP_SRAM_ReadData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l152d_eval_sram.o(i.BSP_SRAM_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BSP_SRAM_ReadData &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
</UL>

<P><STRONG><a name="[135]"></a>BSP_SRAM_WriteData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l152d_eval_sram.o(i.BSP_SRAM_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BSP_SRAM_WriteData &rArr; HAL_SRAM_Write_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
</UL>

<P><STRONG><a name="[1c1]"></a>BSP_TSENSOR_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stm32l152d_eval_tsensor.o(i.BSP_TSENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_TSENSOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
</UL>

<P><STRONG><a name="[1c2]"></a>BSP_TSENSOR_ReadTemp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l152d_eval_tsensor.o(i.BSP_TSENSOR_ReadTemp))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
</UL>

<P><STRONG><a name="[5a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>CheckForUserInput</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.CheckForUserInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckForUserInput
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_demo
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[6b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>EEPROM_I2C_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.EEPROM_I2C_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EEPROM_I2C_IO_Init &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Init
</UL>

<P><STRONG><a name="[13b]"></a>EEPROM_I2C_IO_IsDeviceReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.EEPROM_I2C_IO_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EEPROM_I2C_IO_IsDeviceReady &rArr; I2Cx_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_WritePage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Init
</UL>

<P><STRONG><a name="[13d]"></a>EEPROM_I2C_IO_ReadData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l152d_eval.o(i.EEPROM_I2C_IO_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EEPROM_I2C_IO_ReadData &rArr; I2Cx_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_ReadBuffer
</UL>

<P><STRONG><a name="[13f]"></a>EEPROM_I2C_IO_WriteData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l152d_eval.o(i.EEPROM_I2C_IO_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EEPROM_I2C_IO_WriteData &rArr; I2Cx_WriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_WritePage
</UL>

<P><STRONG><a name="[142]"></a>EEPROM_SPI_IO_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, stm32l152d_eval.o(i.EEPROM_SPI_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EEPROM_SPI_IO_Init &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_Init
</UL>

<P><STRONG><a name="[144]"></a>EEPROM_SPI_IO_ReadData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32l152d_eval.o(i.EEPROM_SPI_IO_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EEPROM_SPI_IO_ReadData &rArr; SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_ReadBuffer
</UL>

<P><STRONG><a name="[147]"></a>EEPROM_SPI_IO_WaitEepromStandbyState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l152d_eval.o(i.EEPROM_SPI_IO_WaitEepromStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EEPROM_SPI_IO_WaitEepromStandbyState &rArr; SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WriteData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[148]"></a>EEPROM_SPI_IO_WriteData</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32l152d_eval.o(i.EEPROM_SPI_IO_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EEPROM_SPI_IO_WriteData &rArr; EEPROM_SPI_IO_WaitEepromStandbyState &rArr; SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WaitEepromStandbyState
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_WritePage
</UL>

<P><STRONG><a name="[3]"></a>EEPROM_demo</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = EEPROM_demo &rArr; EEPROM_Show_Feature &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_SelectDevice
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetHint
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Error_CallBack
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[178]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l1xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[176]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32l1xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[177]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32l1xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_ConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_TransferComplete_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[b5]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[e7]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_DeInit &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[e8]"></a>HAL_ADC_Init</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[157]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[158]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Record
</UL>

<P><STRONG><a name="[f0]"></a>HAL_ADC_Stop_DMA</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Stop_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Stop_DMA &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
</UL>

<P><STRONG><a name="[15a]"></a>HAL_DMA_Abort</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_DMAStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
</UL>

<P><STRONG><a name="[bc]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_MspInit
</UL>

<P><STRONG><a name="[138]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>HAL_DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_MspInit
</UL>

<P><STRONG><a name="[159]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Transmit_DMA
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[c3]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_demo
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_demo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[15c]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_BANK4_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_MspInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_GetState
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspWait
</UL>

<P><STRONG><a name="[111]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WriteData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WaitEepromStandbyState
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_ReadData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_GetStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[15d]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[197]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[15f]"></a>HAL_I2C_Init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[161]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IsDeviceReady
</UL>

<P><STRONG><a name="[c5]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 558 bytes, Stack size 64 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadBuffer
</UL>

<P><STRONG><a name="[c8]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteBuffer
</UL>

<P><STRONG><a name="[15e]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[160]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_I2S_DMAPause</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l1xx_hal_i2s.o(i.HAL_I2S_DMAPause))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Pause
</UL>

<P><STRONG><a name="[f7]"></a>HAL_I2S_DMAResume</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32l1xx_hal_i2s.o(i.HAL_I2S_DMAResume))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Resume
</UL>

<P><STRONG><a name="[f8]"></a>HAL_I2S_DMAStop</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l1xx_hal_i2s.o(i.HAL_I2S_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2S_DMAStop
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
</UL>

<P><STRONG><a name="[168]"></a>HAL_I2S_ErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.HAL_I2S_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2S_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Error_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMAError
</UL>

<P><STRONG><a name="[199]"></a>HAL_I2S_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_i2s.o(i.HAL_I2S_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_Init
</UL>

<P><STRONG><a name="[169]"></a>HAL_I2S_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l1xx_hal_i2s.o(i.HAL_I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_I2S_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_Init
</UL>

<P><STRONG><a name="[16a]"></a>HAL_I2S_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_i2s.o(i.HAL_I2S_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_I2S_Transmit_DMA</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32l1xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2S_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ChangeBuffer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
</UL>

<P><STRONG><a name="[16c]"></a>HAL_I2S_TxCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.HAL_I2S_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_I2S_TxCpltCallback &rArr; BSP_AUDIO_OUT_TransferComplete_CallBack &rArr; BSP_AUDIO_OUT_Play &rArr; HAL_I2S_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMATxCplt
</UL>

<P><STRONG><a name="[16d]"></a>HAL_I2S_TxHalfCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.HAL_I2S_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2S_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMATxHalfCplt
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_NOR_Erase_Block</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_Erase_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NOR_Erase_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Erase_Block
</UL>

<P><STRONG><a name="[114]"></a>HAL_NOR_GetStatus</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_NOR_GetStatus &rArr; HAL_NOR_MspWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspWait
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_WriteData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Erase_Block
</UL>

<P><STRONG><a name="[117]"></a>HAL_NOR_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_NOR_Init &rArr; FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_NOR_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_NOR_MspWait</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32l152d_eval_nor.o(i.HAL_NOR_MspWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NOR_MspWait
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_GetStatus
</UL>

<P><STRONG><a name="[11f]"></a>HAL_NOR_Program</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NOR_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_WriteData
</UL>

<P><STRONG><a name="[119]"></a>HAL_NOR_ReadBuffer</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NOR_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_ReadData
</UL>

<P><STRONG><a name="[11b]"></a>HAL_NOR_Read_ID</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NOR_Read_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Read_ID
</UL>

<P><STRONG><a name="[11d]"></a>HAL_NOR_ReturnToReadMode</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32l1xx_hal_nor.o(i.HAL_NOR_ReturnToReadMode))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_ReturnToReadMode
</UL>

<P><STRONG><a name="[bf]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
</UL>

<P><STRONG><a name="[be]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MspInit
</UL>

<P><STRONG><a name="[170]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_OPAMP_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_opamp.o(i.HAL_OPAMP_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_OPAMP_Init</STRONG> (Thumb, 828 bytes, Stack size 40 bytes, stm32l1xx_hal_opamp.o(i.HAL_OPAMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_OPAMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_OPAMP_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_opamp.o(i.HAL_OPAMP_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_OPAMP_Start</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l1xx_hal_opamp.o(i.HAL_OPAMP_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_OPAMP_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_OPAMP_Stop</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32l1xx_hal_opamp.o(i.HAL_OPAMP_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_OPAMP_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetOscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetOscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1860 bytes, Stack size 40 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_MspInit
</UL>

<P><STRONG><a name="[122]"></a>HAL_SD_Erase</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_Erase &rArr; SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Erase
</UL>

<P><STRONG><a name="[126]"></a>HAL_SD_GetStatus</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_GetStatus &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetStatus
</UL>

<P><STRONG><a name="[124]"></a>HAL_SD_Get_CardInfo</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_Get_CardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SD_Get_CardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_SD_Init</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SD_Init &rArr; SD_PowerON &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Get_CardInfo
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[181]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_ReadBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[187]"></a>HAL_SD_StopTransfer</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[12b]"></a>HAL_SD_WideBusOperation_Config</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_WideBusOperation_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, stm32l1xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_WriteBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>

<P><STRONG><a name="[18b]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>

<P><STRONG><a name="[18d]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[18c]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[18e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[18f]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
</UL>

<P><STRONG><a name="[191]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Read
</UL>

<P><STRONG><a name="[132]"></a>HAL_SRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l1xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SRAM_Init &rArr; FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SRAM_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_BANK4_Init
</UL>

<P><STRONG><a name="[192]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_sram.o(i.HAL_SRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_SRAM_Read_16b</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32l1xx_hal_sram.o(i.HAL_SRAM_Read_16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SRAM_Read_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SRAM_ReadData
</UL>

<P><STRONG><a name="[136]"></a>HAL_SRAM_Write_16b</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_hal_sram.o(i.HAL_SRAM_Write_16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SRAM_Write_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SRAM_WriteData
</UL>

<P><STRONG><a name="[173]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32l1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Record
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Record
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
</UL>

<P><STRONG><a name="[58]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Joystick_demo</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, joystick.o(i.Joystick_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Joystick_demo &rArr; Joystick_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_GetState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_SetHint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[19c]"></a>LCD_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.LCD_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DisplayOn
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DisplayOff
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DisplayOn
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DisplayOff
</UL>

<P><STRONG><a name="[19d]"></a>LCD_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.LCD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_BANK4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadID
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_Init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_ReadID
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_Init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Init
</UL>

<P><STRONG><a name="[1cc]"></a>LCD_IO_ReadData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.LCD_IO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadPixel
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_ReadPixel
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_ReadID
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_ReadPixel
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_ReadID
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadReg
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadPixel
</UL>

<P><STRONG><a name="[1cb]"></a>LCD_IO_WriteMultipleData</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32l152d_eval.o(i.LCD_IO_WriteMultipleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_IO_WriteMultipleData
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WritePixel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawVLine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawRGBImage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawHLine
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawBitmap
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WritePixel
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawVLine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawHLine
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawBitmap
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WritePixel
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawVLine
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawHLine
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawBitmap
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WritePixel
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawVLine
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawRGBImage
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawHLine
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawBitmap
</UL>

<P><STRONG><a name="[1ca]"></a>LCD_IO_WriteReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.LCD_IO_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WritePixel
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadPixel
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawVLine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawRGBImage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawHLine
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawBitmap
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WritePixel
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawVLine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawHLine
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawBitmap
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WritePixel
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_Init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawVLine
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawHLine
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawBitmap
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WritePixel
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadReg
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadPixel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawVLine
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawRGBImage
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawHLine
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawBitmap
</UL>

<P><STRONG><a name="[19e]"></a>LCD_LOG_ClearTextZone</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_log.o(i.LCD_LOG_ClearTextZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_LOG_ClearTextZone &rArr; BSP_LCD_ClearStringLine &rArr; BSP_LCD_FillRect &rArr; BSP_LCD_DrawHLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ClearStringLine
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
</UL>

<P><STRONG><a name="[19f]"></a>LCD_LOG_DeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcd_log.o(i.LCD_LOG_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ClearTextZone
</UL>

<P><STRONG><a name="[1a0]"></a>LCD_LOG_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_log.o(i.LCD_LOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_LOG_Init &rArr; BSP_LCD_Clear &rArr; BSP_LCD_DrawHLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
</UL>

<P><STRONG><a name="[1a1]"></a>LCD_LOG_ScrollBack</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lcd_log.o(i.LCD_LOG_ScrollBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_LOG_ScrollBack &rArr; LCD_LOG_UpdateDisplay &rArr; BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
</UL>

<P><STRONG><a name="[1a3]"></a>LCD_LOG_ScrollForward</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lcd_log.o(i.LCD_LOG_ScrollForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_LOG_ScrollForward &rArr; LCD_LOG_UpdateDisplay &rArr; BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
</UL>

<P><STRONG><a name="[1a4]"></a>LCD_LOG_SetFooter</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lcd_log.o(i.LCD_LOG_SetFooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_LOG_SetFooter &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
</UL>

<P><STRONG><a name="[1a5]"></a>LCD_LOG_SetHeader</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd_log.o(i.LCD_LOG_SetHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_LOG_SetHeader &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
</UL>

<P><STRONG><a name="[1a2]"></a>LCD_LOG_UpdateDisplay</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lcd_log.o(i.LCD_LOG_UpdateDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_LOG_UpdateDisplay &rArr; BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ScrollForward
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ScrollBack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1]"></a>LCD_demo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i.LCD_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_demo &rArr; LCD_Show_Feature &rArr; BSP_LCD_FillPolygon &rArr; BSP_LCD_FillTriangle &rArr; BSP_LCD_DrawLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Feature
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetHint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Log_demo</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, log.o(i.Log_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Log_demo &rArr; LCD_LOG_ScrollForward &rArr; LCD_LOG_UpdateDisplay &rArr; BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetHeader
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_SetFooter
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ScrollForward
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ScrollBack
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_ClearTextZone
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_GetState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NOR_demo</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, nor.o(i.NOR_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NOR_demo &rArr; NOR_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_WriteData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_ReturnToReadMode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Read_ID
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_ReadData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Erase_Block
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayOn
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayOff
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_SetHint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>SDIO_DataConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1ad]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp6Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[1b0]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
</UL>

<P><STRONG><a name="[17d]"></a>SDIO_GetResponse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Erase
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp6Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[182]"></a>SDIO_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1b2]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[186]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[17e]"></a>SDIO_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Erase
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[18a]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[2]"></a>SD_demo</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, sd.o(i.SD_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SD_demo &rArr; BSP_SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Erase
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetHint
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>SRAM_demo</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, sram.o(i.SRAM_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SRAM_demo &rArr; SRAM_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SRAM_WriteData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SRAM_ReadData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SRAM_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetHint
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayOn
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>STLM75_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stlm75.o(i.STLM75_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = STLM75_Init &rArr; TSENSOR_IO_Write &rArr; I2Cx_WriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stlm75.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>STLM75_IsReady</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stlm75.o(i.STLM75_IsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STLM75_IsReady &rArr; TSENSOR_IO_IsDeviceReady &rArr; I2Cx_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_IsDeviceReady
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stlm75.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>STLM75_ReadStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stlm75.o(i.STLM75_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = STLM75_ReadStatus &rArr; TSENSOR_IO_Read &rArr; I2Cx_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stlm75.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>STLM75_ReadTemp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stlm75.o(i.STLM75_ReadTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = STLM75_ReadTemp &rArr; TSENSOR_IO_Read &rArr; I2Cx_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stlm75.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; Toggle_Leds
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Leds
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_stm32l1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(.text)
</UL>
<P><STRONG><a name="[1b9]"></a>TSENSOR_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.TSENSOR_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSENSOR_IO_Init &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLM75_IsReady
</UL>

<P><STRONG><a name="[1ba]"></a>TSENSOR_IO_IsDeviceReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.TSENSOR_IO_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSENSOR_IO_IsDeviceReady &rArr; I2Cx_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLM75_IsReady
</UL>

<P><STRONG><a name="[1bb]"></a>TSENSOR_IO_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l152d_eval.o(i.TSENSOR_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TSENSOR_IO_Read &rArr; I2Cx_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLM75_ReadTemp
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLM75_ReadStatus
</UL>

<P><STRONG><a name="[1b8]"></a>TSENSOR_IO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l152d_eval.o(i.TSENSOR_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TSENSOR_IO_Write &rArr; I2Cx_WriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLM75_Init
</UL>

<P><STRONG><a name="[4]"></a>TSENSOR_demo</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, temperature_sensor.o(i.TSENSOR_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TSENSOR_demo &rArr; TSENSOR_Display_Temperature &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TSENSOR_ReadTemp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TSENSOR_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_SetHint
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_Display_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1bd]"></a>Toggle_Leds</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.Toggle_Leds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Toggle_Leds
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>__0printf$4</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e4]"></a>__1printf$4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4), UNUSED)

<P><STRONG><a name="[1a8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_demo
</UL>

<P><STRONG><a name="[1c5]"></a>__0snprintf$4</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf4.o(i.__0snprintf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e5]"></a>__1snprintf$4</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf4.o(i.__0snprintf$4), UNUSED)

<P><STRONG><a name="[14e]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf4.o(i.__0snprintf$4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Show_Feature
</UL>

<P><STRONG><a name="[1c6]"></a>__0sprintf$4</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e6]"></a>__1sprintf$4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4), UNUSED)

<P><STRONG><a name="[ca]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_DisplayInfos
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_Display_Temperature
</UL>

<P><STRONG><a name="[1e7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[37]"></a>cs43l22_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs43l22.o(i.cs43l22_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>cs43l22_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cs43l22.o(i.cs43l22_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cs43l22_Init &rArr; cs43l22_SetVolume &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetVolume
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>cs43l22_Pause</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cs43l22_Pause &rArr; cs43l22_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>cs43l22_Play</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cs43l22_Play &rArr; cs43l22_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>cs43l22_ReadID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs43l22.o(i.cs43l22_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cs43l22_ReadID &rArr; AUDIO_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>cs43l22_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs43l22.o(i.cs43l22_Reset))
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>cs43l22_Resume</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cs43l22.o(i.cs43l22_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cs43l22_Resume &rArr; cs43l22_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>cs43l22_SetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs43l22.o(i.cs43l22_SetFrequency))
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>cs43l22_SetMute</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_SetMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cs43l22_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Stop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Resume
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Play
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>cs43l22_SetOutputMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_SetOutputMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cs43l22_SetOutputMode &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>cs43l22_SetVolume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cs43l22_SetVolume &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>cs43l22_Stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cs43l22.o(i.cs43l22_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cs43l22_Stop &rArr; cs43l22_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs43l22.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>fputc</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, lcd_log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fputc &rArr; LCD_LOG_UpdateDisplay &rArr; BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0printf$4)
</UL>
<P><STRONG><a name="[2c]"></a>hx8347d_DisplayOff</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hx8347d.o(i.hx8347d_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hx8347d_DisplayOff &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>hx8347d_DisplayOn</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hx8347d.o(i.hx8347d_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hx8347d_DisplayOn &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>hx8347d_DrawBitmap</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hx8347d.o(i.hx8347d_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hx8347d_DrawBitmap &rArr; hx8347d_SetCursor &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>hx8347d_DrawHLine</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hx8347d.o(i.hx8347d_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hx8347d_DrawHLine &rArr; hx8347d_SetCursor &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>hx8347d_DrawVLine</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hx8347d.o(i.hx8347d_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hx8347d_DrawVLine &rArr; hx8347d_SetCursor &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>hx8347d_GetLcdPixelHeight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hx8347d.o(i.hx8347d_GetLcdPixelHeight))
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>hx8347d_GetLcdPixelWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hx8347d.o(i.hx8347d_GetLcdPixelWidth))
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>hx8347d_Init</STRONG> (Thumb, 540 bytes, Stack size 8 bytes, hx8347d.o(i.hx8347d_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hx8347d_Init &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetCursor
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>hx8347d_ReadID</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hx8347d.o(i.hx8347d_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hx8347d_ReadID &rArr; hx8347d_Init &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>hx8347d_ReadPixel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hx8347d.o(i.hx8347d_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hx8347d_ReadPixel &rArr; hx8347d_SetCursor &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetCursor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>hx8347d_SetCursor</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hx8347d.o(i.hx8347d_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hx8347d_SetCursor &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WritePixel
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_ReadPixel
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawVLine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawHLine
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>hx8347d_SetDisplayWindow</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hx8347d.o(i.hx8347d_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hx8347d_SetDisplayWindow &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>hx8347d_WritePixel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hx8347d.o(i.hx8347d_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hx8347d_WritePixel &rArr; hx8347d_SetCursor &rArr; hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx8347d.o(.data)
</UL>
<P><STRONG><a name="[1c9]"></a>hx8347d_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hx8347d.o(i.hx8347d_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hx8347d_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetDisplayWindow
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_SetCursor
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DrawBitmap
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DisplayOn
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347d_DisplayOff
</UL>

<P><STRONG><a name="[d]"></a>ili9320_DisplayOff</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ili9320_DisplayOff &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ili9320_DisplayOn</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ili9320_DisplayOn &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>ili9320_DrawBitmap</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ili9320.o(i.ili9320_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ili9320_DrawBitmap &rArr; ili9320_SetCursor &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ili9320_DrawHLine</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ili9320.o(i.ili9320_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9320_DrawHLine &rArr; ili9320_SetCursor &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>ili9320_DrawRGBImage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ili9320.o(i.ili9320_DrawRGBImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9320_DrawRGBImage &rArr; ili9320_SetCursor &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ili9320_DrawVLine</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ili9320.o(i.ili9320_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ili9320_DrawVLine &rArr; ili9320_SetCursor &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ili9320_GetLcdPixelHeight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ili9320.o(i.ili9320_GetLcdPixelHeight))
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ili9320_GetLcdPixelWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9320.o(i.ili9320_GetLcdPixelWidth))
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ili9320_Init</STRONG> (Thumb, 504 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ili9320_Init &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ili9320_ReadID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ili9320_ReadID &rArr; ili9320_Init &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadReg
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>ili9320_ReadPixel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ili9320_ReadPixel &rArr; ili9320_SetCursor &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[1ce]"></a>ili9320_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ili9320_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadID
</UL>

<P><STRONG><a name="[e]"></a>ili9320_SetCursor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ili9320_SetCursor &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WritePixel
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_ReadPixel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawVLine
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawRGBImage
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawHLine
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ili9320_SetDisplayWindow</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ili9320.o(i.ili9320_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9320_SetDisplayWindow &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>ili9320_WritePixel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9320.o(i.ili9320_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9320_WritePixel &rArr; ili9320_SetCursor &rArr; ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9320.o(.data)
</UL>
<P><STRONG><a name="[1cd]"></a>ili9320_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ili9320.o(i.ili9320_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ili9320_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetDisplayWindow
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawVLine
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DrawBitmap
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DisplayOn
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_DisplayOff
</UL>

<P><STRONG><a name="[45]"></a>ili9325_DisplayOff</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ili9325.o(i.ili9325_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ili9325_DisplayOff &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>ili9325_DisplayOn</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ili9325.o(i.ili9325_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ili9325_DisplayOn &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>ili9325_DrawBitmap</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ili9325.o(i.ili9325_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ili9325_DrawBitmap &rArr; ili9325_SetCursor &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>ili9325_DrawHLine</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ili9325.o(i.ili9325_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9325_DrawHLine &rArr; ili9325_SetCursor &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>ili9325_DrawRGBImage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ili9325.o(i.ili9325_DrawRGBImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9325_DrawRGBImage &rArr; ili9325_SetCursor &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>ili9325_DrawVLine</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ili9325.o(i.ili9325_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ili9325_DrawVLine &rArr; ili9325_SetCursor &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>ili9325_GetLcdPixelHeight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ili9325.o(i.ili9325_GetLcdPixelHeight))
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>ili9325_GetLcdPixelWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9325.o(i.ili9325_GetLcdPixelWidth))
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>ili9325_Init</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, ili9325.o(i.ili9325_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ili9325_Init &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>ili9325_ReadID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili9325.o(i.ili9325_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ili9325_ReadID &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadReg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>ili9325_ReadPixel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ili9325.o(i.ili9325_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ili9325_ReadPixel &rArr; ili9325_SetCursor &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>ili9325_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili9325.o(i.ili9325_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ili9325_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadID
</UL>

<P><STRONG><a name="[46]"></a>ili9325_SetCursor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ili9325.o(i.ili9325_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ili9325_SetCursor &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WritePixel
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_ReadPixel
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawVLine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawRGBImage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawHLine
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>ili9325_SetDisplayWindow</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ili9325.o(i.ili9325_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9325_SetDisplayWindow &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>ili9325_WritePixel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9325.o(i.ili9325_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ili9325_WritePixel &rArr; ili9325_SetCursor &rArr; ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9325.o(.data)
</UL>
<P><STRONG><a name="[1cf]"></a>ili9325_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ili9325.o(i.ili9325_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ili9325_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetDisplayWindow
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_SetCursor
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawVLine
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DrawBitmap
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DisplayOn
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9325_DisplayOff
</UL>

<P><STRONG><a name="[98]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; Display_DemoDescription &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_DemoDescription
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1b]"></a>spfd5408_DisplayOff</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spfd5408.o(i.spfd5408_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spfd5408_DisplayOff &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>spfd5408_DisplayOn</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spfd5408.o(i.spfd5408_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spfd5408_DisplayOn &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>spfd5408_DrawBitmap</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spfd5408.o(i.spfd5408_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spfd5408_DrawBitmap &rArr; spfd5408_SetCursor &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>spfd5408_DrawHLine</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spfd5408.o(i.spfd5408_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spfd5408_DrawHLine &rArr; spfd5408_SetCursor &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>spfd5408_DrawVLine</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, spfd5408.o(i.spfd5408_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spfd5408_DrawVLine &rArr; spfd5408_SetCursor &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>spfd5408_GetLcdPixelHeight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spfd5408.o(i.spfd5408_GetLcdPixelHeight))
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>spfd5408_GetLcdPixelWidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spfd5408.o(i.spfd5408_GetLcdPixelWidth))
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>spfd5408_Init</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, spfd5408.o(i.spfd5408_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = spfd5408_Init &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>spfd5408_ReadID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spfd5408.o(i.spfd5408_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spfd5408_ReadID &rArr; LCD_IO_Init &rArr; FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>spfd5408_ReadPixel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spfd5408.o(i.spfd5408_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spfd5408_ReadPixel &rArr; spfd5408_SetCursor &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetCursor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>spfd5408_SetCursor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spfd5408.o(i.spfd5408_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spfd5408_SetCursor &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WritePixel
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_ReadPixel
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_Init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawVLine
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawHLine
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>spfd5408_SetDisplayWindow</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, spfd5408.o(i.spfd5408_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spfd5408_SetDisplayWindow &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>spfd5408_WritePixel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spfd5408.o(i.spfd5408_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spfd5408_WritePixel &rArr; spfd5408_SetCursor &rArr; spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetCursor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spfd5408.o(.data)
</UL>
<P><STRONG><a name="[1d2]"></a>spfd5408_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spfd5408.o(i.spfd5408_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spfd5408_WriteReg &rArr; LCD_IO_WriteMultipleData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteMultipleData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetDisplayWindow
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_SetCursor
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_Init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawVLine
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DrawBitmap
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DisplayOn
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spfd5408_DisplayOff
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a9]"></a>NOR_SetHint</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, nor.o(i.NOR_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NOR_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_demo
</UL>

<P><STRONG><a name="[e0]"></a>AudioRecord_SetHint</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, audio_record.o(i.AudioRecord_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AudioRecord_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRecord_demo
</UL>

<P><STRONG><a name="[139]"></a>Display_DemoDescription</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, main.o(i.Display_DemoDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Display_DemoDescription &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>SystemClock_Config</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>SRAM_SetHint</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sram.o(i.SRAM_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SRAM_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_demo
</UL>

<P><STRONG><a name="[c9]"></a>AudioPlay_DisplayInfos</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, audio_play.o(i.AudioPlay_DisplayInfos))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AudioPlay_DisplayInfos &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
</UL>

<P><STRONG><a name="[cc]"></a>AudioPlay_SetHint</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, audio_play.o(i.AudioPlay_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AudioPlay_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlay_demo
</UL>

<P><STRONG><a name="[14a]"></a>EEPROM_SetHint</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, eeprom.o(i.EEPROM_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EEPROM_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_demo
</UL>

<P><STRONG><a name="[14b]"></a>EEPROM_Show_Feature</STRONG> (Thumb, 490 bytes, Stack size 136 bytes, eeprom.o(i.EEPROM_Show_Feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = EEPROM_Show_Feature &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_WriteBuffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_ReadBuffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_demo
</UL>

<P><STRONG><a name="[1b4]"></a>SD_SetHint</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, sd.o(i.SD_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_demo
</UL>

<P><STRONG><a name="[1bf]"></a>TSENSOR_Display_Temperature</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, temperature_sensor.o(i.TSENSOR_Display_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TSENSOR_Display_Temperature &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
</UL>

<P><STRONG><a name="[1c0]"></a>TSENSOR_SetHint</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, temperature_sensor.o(i.TSENSOR_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TSENSOR_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_demo
</UL>

<P><STRONG><a name="[19b]"></a>Joystick_SetHint</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, joystick.o(i.Joystick_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Joystick_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_demo
</UL>

<P><STRONG><a name="[1a6]"></a>LCD_SetHint</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_demo
</UL>

<P><STRONG><a name="[1a7]"></a>LCD_Show_Feature</STRONG> (Thumb, 608 bytes, Stack size 40 bytes, lcd.o(i.LCD_Show_Feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LCD_Show_Feature &rArr; BSP_LCD_FillPolygon &rArr; BSP_LCD_FillTriangle &rArr; BSP_LCD_DrawLine &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillPolygon
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillEllipse
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPolygon
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawEllipse
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_demo
</UL>

<P><STRONG><a name="[137]"></a>CODEC_IO_Write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cs43l22.o(i.CODEC_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Stop
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetVolume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetOutputMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_SetMute
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Resume
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Play
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Pause
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs43l22_Init
</UL>

<P><STRONG><a name="[179]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[17f]"></a>SD_CmdResp1Error</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32l1xx_hal_sd.o(i.SD_CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Erase
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1b1]"></a>SD_CmdResp2Error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l1xx_hal_sd.o(i.SD_CmdResp2Error))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
</UL>

<P><STRONG><a name="[1ae]"></a>SD_CmdResp6Error</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32l1xx_hal_sd.o(i.SD_CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
</UL>

<P><STRONG><a name="[1b3]"></a>SD_CmdResp7Error</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l1xx_hal_sd.o(i.SD_CmdResp7Error))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1af]"></a>SD_FindSCR</STRONG> (Thumb, 266 bytes, Stack size 104 bytes, stm32l1xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[184]"></a>SD_Initialize_Cards</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, stm32l1xx_hal_sd.o(i.SD_Initialize_Cards))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_Initialize_Cards &rArr; SD_CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp6Error
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[180]"></a>SD_IsCardProgramming</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, stm32l1xx_hal_sd.o(i.SD_IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Erase
</UL>

<P><STRONG><a name="[183]"></a>SD_PowerON</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, stm32l1xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_PowerON &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp7Error
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[189]"></a>SD_WideBus_Disable</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, stm32l1xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
</UL>

<P><STRONG><a name="[188]"></a>SD_WideBus_Enable</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, stm32l1xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
</UL>

<P><STRONG><a name="[190]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32l1xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[a0]"></a>I2S_DMAError</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_i2s.o(i.I2S_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_DMAError &rArr; HAL_I2S_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
</UL>
<P><STRONG><a name="[9f]"></a>I2S_DMATxCplt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_i2s.o(i.I2S_DMATxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2S_DMATxCplt &rArr; HAL_I2S_TxCpltCallback &rArr; BSP_AUDIO_OUT_TransferComplete_CallBack &rArr; BSP_AUDIO_OUT_Play &rArr; HAL_I2S_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
</UL>
<P><STRONG><a name="[9e]"></a>I2S_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l1xx_hal_i2s.o(i.I2S_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_DMATxHalfCplt &rArr; HAL_I2S_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
</UL>
<P><STRONG><a name="[17c]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[194]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32l1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[196]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l1xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[163]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, stm32l1xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[165]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32l1xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[167]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[162]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[195]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[164]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[166]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[15b]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32l1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[9b]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32l1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt &rArr; HAL_ADC_ConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[9d]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[9c]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt &rArr; HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[b7]"></a>ADCx_MspInit</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, stm32l152d_eval_audio.o(i.ADCx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADCx_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetOscConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[f5]"></a>I2SOUT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l152d_eval_audio.o(i.I2SOUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2SOUT_Init &rArr; I2SOUT_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_GetState
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[19a]"></a>I2SOUT_MspInit</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, stm32l152d_eval_audio.o(i.I2SOUT_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2SOUT_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SOUT_Init
</UL>

<P><STRONG><a name="[50]"></a>EEPROM_I2C_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l152d_eval_eeprom.o(i.EEPROM_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEPROM_I2C_Init &rArr; EEPROM_I2C_IO_IsDeviceReady &rArr; I2Cx_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_IsDeviceReady
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l152d_eval_eeprom.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>EEPROM_I2C_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l152d_eval_eeprom.o(i.EEPROM_I2C_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EEPROM_I2C_ReadBuffer &rArr; EEPROM_I2C_IO_ReadData &rArr; I2Cx_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l152d_eval_eeprom.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>EEPROM_I2C_WritePage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l152d_eval_eeprom.o(i.EEPROM_I2C_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EEPROM_I2C_WritePage &rArr; EEPROM_I2C_IO_WriteData &rArr; I2Cx_WriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_TIMEOUT_UserCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_WriteData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_IsDeviceReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l152d_eval_eeprom.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>EEPROM_SPI_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l152d_eval_eeprom.o(i.EEPROM_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EEPROM_SPI_Init &rArr; EEPROM_SPI_WaitEepromStandbyState &rArr; EEPROM_SPI_IO_WaitEepromStandbyState &rArr; SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_WaitEepromStandbyState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l152d_eval_eeprom.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>EEPROM_SPI_ReadBuffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l152d_eval_eeprom.o(i.EEPROM_SPI_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EEPROM_SPI_ReadBuffer &rArr; EEPROM_SPI_IO_ReadData &rArr; SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_ReadData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_WaitEepromStandbyState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l152d_eval_eeprom.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>EEPROM_SPI_WaitEepromStandbyState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l152d_eval_eeprom.o(i.EEPROM_SPI_WaitEepromStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EEPROM_SPI_WaitEepromStandbyState &rArr; EEPROM_SPI_IO_WaitEepromStandbyState &rArr; SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_TIMEOUT_UserCallback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WaitEepromStandbyState
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_WritePage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_ReadBuffer
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_Init
</UL>

<P><STRONG><a name="[55]"></a>EEPROM_SPI_WritePage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l152d_eval_eeprom.o(i.EEPROM_SPI_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EEPROM_SPI_WritePage &rArr; EEPROM_SPI_IO_WriteData &rArr; EEPROM_SPI_IO_WaitEepromStandbyState &rArr; SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WriteData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_WaitEepromStandbyState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l152d_eval_eeprom.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>LCD_DrawChar</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, stm32l152d_eval_lcd.o(i.LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DrawChar &rArr; BSP_LCD_DrawBitmap &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>

<P><STRONG><a name="[106]"></a>LCD_DrawPixel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l152d_eval_lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawLine
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawEllipse
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
</UL>

<P><STRONG><a name="[104]"></a>LCD_SetDisplayWindow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l152d_eval_lcd.o(i.LCD_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
</UL>

<P><STRONG><a name="[129]"></a>SD_MspInit</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32l152d_eval_sd.o(i.SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[116]"></a>NOR_MspInit</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32l152d_eval_nor.o(i.NOR_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NOR_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NOR_Init
</UL>

<P><STRONG><a name="[131]"></a>SRAM_MspInit</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32l152d_eval_sram.o(i.SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SRAM_Init
</UL>

<P><STRONG><a name="[153]"></a>FSMC_BANK4_Init</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, stm32l152d_eval.o(i.FSMC_BANK4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FSMC_BANK4_Init &rArr; FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_BANK4_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[154]"></a>FSMC_BANK4_MspInit</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32l152d_eval.o(i.FSMC_BANK4_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FSMC_BANK4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_BANK4_Init
</UL>

<P><STRONG><a name="[c6]"></a>I2Cx_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l152d_eval.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2Cx_Error &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteBuffer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadBuffer
</UL>

<P><STRONG><a name="[c1]"></a>I2Cx_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l152d_eval.o(i.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_Init
</UL>

<P><STRONG><a name="[13c]"></a>I2Cx_IsDeviceReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.I2Cx_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2Cx_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_IsDeviceReady
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_IsDeviceReady
</UL>

<P><STRONG><a name="[198]"></a>I2Cx_MspInit</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32l152d_eval.o(i.I2Cx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[13e]"></a>I2Cx_ReadBuffer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stm32l152d_eval.o(i.I2Cx_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2Cx_ReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_Read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_ReadData
</UL>

<P><STRONG><a name="[140]"></a>I2Cx_WriteBuffer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stm32l152d_eval.o(i.I2Cx_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2Cx_WriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSENSOR_IO_Write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_IO_WriteData
</UL>

<P><STRONG><a name="[1b5]"></a>SPIx_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l152d_eval.o(i.SPIx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Read
</UL>

<P><STRONG><a name="[143]"></a>SPIx_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l152d_eval.o(i.SPIx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_Init
</UL>

<P><STRONG><a name="[1b6]"></a>SPIx_MspInit</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, stm32l152d_eval.o(i.SPIx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[146]"></a>SPIx_Read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l152d_eval.o(i.SPIx_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPIx_Read &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WaitEepromStandbyState
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_ReadData
</UL>

<P><STRONG><a name="[145]"></a>SPIx_Write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l152d_eval.o(i.SPIx_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPIx_Write &rArr; SPIx_Error &rArr; SPIx_Init &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WriteData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_WaitEepromStandbyState
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SPI_IO_ReadData
</UL>

<P><STRONG><a name="[1c4]"></a>_printf_core</STRONG> (Thumb, 552 bytes, Stack size 96 bytes, printf4.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$4
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$4
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$4
</UL>

<P><STRONG><a name="[a2]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf4.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0snprintf$4)
</UL>
<P><STRONG><a name="[a3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf4.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0sprintf$4)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
